/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OrderBookSwapProxyInterface extends ethers.utils.Interface {
  functions: {
    "getImplementation()": FunctionFragment;
    "getProxyOwner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "orderOfHash(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "setImplementation(address)": FunctionFragment;
    "setProxyOwner(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "orderOfHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProxyOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderOfHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProxyOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ImplementationChanged(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ImplementationChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ImplementationChangedEvent = TypedEvent<
  [string, string] & { _oldImplementation: string; _newImplementation: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { _oldOwner: string; _newOwner: string }
>;

export class OrderBookSwapProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OrderBookSwapProxyInterface;

  functions: {
    /**
     * Return address of the implementation.
     */
    getImplementation(
      overrides?: CallOverrides
    ): Promise<[string] & { _implementation: string }>;

    /**
     * Return address of the owner.
     */
    getProxyOwner(
      overrides?: CallOverrides
    ): Promise<[string] & { _owner: string }>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    orderOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        number,
        string,
        string
      ] & {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumber;
        amountOutMin: BigNumber;
        recipient: string;
        deadline: BigNumber;
        created: BigNumber;
        v: number;
        r: string;
        s: string;
      }
    >;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Wrapper for _setImplementation that exposes the function as public for owner to be able to set a new version of the contract as current pointing implementation.
     * Set address of the implementation.
     * @param _implementation Address of the implementation.
     */
    setImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Set address of the owner.
     * @param _owner Address of the owner.
     */
    setProxyOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Return address of the implementation.
   */
  getImplementation(overrides?: CallOverrides): Promise<string>;

  /**
   * Return address of the owner.
   */
  getProxyOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns true if the caller is the current owner.
   */
  isOwner(overrides?: CallOverrides): Promise<boolean>;

  orderOfHash(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      number,
      string,
      string
    ] & {
      maker: string;
      fromToken: string;
      toToken: string;
      amountIn: BigNumber;
      amountOutMin: BigNumber;
      recipient: string;
      deadline: BigNumber;
      created: BigNumber;
      v: number;
      r: string;
      s: string;
    }
  >;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Wrapper for _setImplementation that exposes the function as public for owner to be able to set a new version of the contract as current pointing implementation.
   * Set address of the implementation.
   * @param _implementation Address of the implementation.
   */
  setImplementation(
    _implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Set address of the owner.
   * @param _owner Address of the owner.
   */
  setProxyOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Return address of the implementation.
     */
    getImplementation(overrides?: CallOverrides): Promise<string>;

    /**
     * Return address of the owner.
     */
    getProxyOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<boolean>;

    orderOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        number,
        string,
        string
      ] & {
        maker: string;
        fromToken: string;
        toToken: string;
        amountIn: BigNumber;
        amountOutMin: BigNumber;
        recipient: string;
        deadline: BigNumber;
        created: BigNumber;
        v: number;
        r: string;
        s: string;
      }
    >;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Wrapper for _setImplementation that exposes the function as public for owner to be able to set a new version of the contract as current pointing implementation.
     * Set address of the implementation.
     * @param _implementation Address of the implementation.
     */
    setImplementation(
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Set address of the owner.
     * @param _owner Address of the owner.
     */
    setProxyOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ImplementationChanged(address,address)"(
      _oldImplementation?: string | null,
      _newImplementation?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldImplementation: string; _newImplementation: string }
    >;

    ImplementationChanged(
      _oldImplementation?: string | null,
      _newImplementation?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldImplementation: string; _newImplementation: string }
    >;

    "OwnershipTransferred(address,address)"(
      _oldOwner?: string | null,
      _newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldOwner: string; _newOwner: string }
    >;

    OwnershipTransferred(
      _oldOwner?: string | null,
      _newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { _oldOwner: string; _newOwner: string }
    >;
  };

  estimateGas: {
    /**
     * Return address of the implementation.
     */
    getImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Return address of the owner.
     */
    getProxyOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    orderOfHash(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Wrapper for _setImplementation that exposes the function as public for owner to be able to set a new version of the contract as current pointing implementation.
     * Set address of the implementation.
     * @param _implementation Address of the implementation.
     */
    setImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Set address of the owner.
     * @param _owner Address of the owner.
     */
    setProxyOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Return address of the implementation.
     */
    getImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Return address of the owner.
     */
    getProxyOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderOfHash(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Wrapper for _setImplementation that exposes the function as public for owner to be able to set a new version of the contract as current pointing implementation.
     * Set address of the implementation.
     * @param _implementation Address of the implementation.
     */
    setImplementation(
      _implementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Set address of the owner.
     * @param _owner Address of the owner.
     */
    setProxyOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
